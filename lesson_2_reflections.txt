What happens when you initialize a repository? Why do you need to do it?
	You create a hidden .git folder. You are creating a location to commit changes to metadata.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	Staging area come between working directory and repository. 
	It allows you to track what is committed and what is not. 
	You can choose to un-commit (git reset) before committing the file(s) to the repo.

How can you use the staging area to make sure you have one commit per logical
change?
	You can use git status to see what files have been changed.
	You can split each change into meaningful commits, either individually or collectively.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	When you are working on multiple projects/changes to metadata. (Context switching)
	When working as part of a team and other members have other branches checked out.
	Branches help track YOUR changes. Also can take the latest "master" (production) copy and use that as basis for your branch.
	Development can work on your branch/experimental branch - not production - can collaborate with others.
	
How do the diagrams help you visualize the branch structure?
Its easy to get lost in the "branches" that exist or are working on. 
	Also good to understand which parent commits are coming along with you in your new branch, if any.
	
What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
You combine all the parent commits from the time the branch was created. 
	Diagram is a very simple way to understand where the branch was created and how the commits inter-relate.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
	It saves a lot of time.
	Auto-merging is not perfect - you still need to check code especially if multiple people are involved.
